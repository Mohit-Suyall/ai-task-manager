{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\OneDrive\\\\Desktop\\\\all projects\\\\ai-task-manager\\\\frontend\\\\src\\\\contexts\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n\n  // API Base URL - Change this to your deployed backend URL\n  const API_BASE = process.env.REACT_APP_API_URL || process.env.NODE_ENV === 'production' ? 'https://your-backend-url.vercel.app' // Replace with your actual backend URL\n  : 'http://localhost:8000';\n  useEffect(() => {\n    if (token) {\n      // For now, we'll assume the token is valid if it exists\n      // In a production app, you'd want to verify the token with the server\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        if (payload.exp * 1000 > Date.now()) {\n          setUser({\n            id: payload.userId,\n            email: payload.email,\n            name: payload.name || payload.email.split('@')[0]\n          });\n        } else {\n          localStorage.removeItem('token');\n          setToken(null);\n        }\n      } catch (error) {\n        localStorage.removeItem('token');\n        setToken(null);\n      }\n      setLoading(false);\n    } else {\n      setLoading(false);\n    }\n  }, [token, API_BASE]);\n  const login = async (email, password) => {\n    try {\n      const response = await fetch(`${API_BASE}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem('token', data.token);\n        setToken(data.token);\n        setUser(data.user);\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message\n        };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: 'Network error - Please check if backend is running'\n      };\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      const response = await fetch(`${API_BASE}/api/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name,\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        localStorage.setItem('token', data.token);\n        setToken(data.token);\n        setUser(data.user);\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          error: data.message\n        };\n      }\n    } catch (error) {\n      console.error('Register error:', error);\n      return {\n        success: false,\n        error: 'Network error - Please check if backend is running'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n  };\n  const value = {\n    user,\n    token,\n    loading,\n    login,\n    register,\n    logout,\n    API_BASE\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"/pbUqy0QsBvMqKPYubk3+KKKH8I=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","setToken","localStorage","getItem","API_BASE","process","env","REACT_APP_API_URL","NODE_ENV","payload","JSON","parse","atob","split","exp","Date","now","id","userId","email","name","removeItem","error","login","password","response","fetch","method","headers","body","stringify","data","json","ok","setItem","success","message","console","register","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/hp/OneDrive/Desktop/all projects/ai-task-manager/frontend/src/contexts/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n\n  // API Base URL - Change this to your deployed backend URL\n  const API_BASE = process.env.REACT_APP_API_URL || \n                   process.env.NODE_ENV === 'production' \n                     ? 'https://your-backend-url.vercel.app'  // Replace with your actual backend URL\n                     : 'http://localhost:8000';\n\n  useEffect(() => {\n    if (token) {\n      // For now, we'll assume the token is valid if it exists\n      // In a production app, you'd want to verify the token with the server\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        if (payload.exp * 1000 > Date.now()) {\n          setUser({ \n            id: payload.userId, \n            email: payload.email,\n            name: payload.name || payload.email.split('@')[0]\n          });\n        } else {\n          localStorage.removeItem('token');\n          setToken(null);\n        }\n      } catch (error) {\n        localStorage.removeItem('token');\n        setToken(null);\n      }\n      setLoading(false);\n    } else {\n      setLoading(false);\n    }\n  }, [token, API_BASE]);\n\n  const login = async (email, password) => {\n    try {\n      const response = await fetch(`${API_BASE}/api/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        localStorage.setItem('token', data.token);\n        setToken(data.token);\n        setUser(data.user);\n        return { success: true };\n      } else {\n        return { success: false, error: data.message };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return { success: false, error: 'Network error - Please check if backend is running' };\n    }\n  };\n\n  const register = async (name, email, password) => {\n    try {\n      const response = await fetch(`${API_BASE}/api/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name, email, password }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        localStorage.setItem('token', data.token);\n        setToken(data.token);\n        setUser(data.user);\n        return { success: true };\n      } else {\n        return { success: false, error: data.message };\n      }\n    } catch (error) {\n      console.error('Register error:', error);\n      return { success: false, error: 'Network error - Please check if backend is running' };\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setToken(null);\n    setUser(null);\n  };\n\n  const value = {\n    user,\n    token,\n    loading,\n    login,\n    register,\n    logout,\n    API_BASE\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}